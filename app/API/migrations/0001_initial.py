# Generated by Django 3.0 on 2021-09-01 18:14

import API.models.dose
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chamber',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('position', models.PositiveSmallIntegerField()),
                ('is_full', models.BooleanField(default=False)),
                ('real_administration_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContainerVersion',
            fields=[
                ('name', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('capacity', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this device should be treated as active. Unselect this instead of deleting device object.', verbose_name='active')),
                ('name', models.CharField(max_length=100)),
                ('serial_number', models.UUIDField(blank=True, null=True)),
                ('hardware_version', models.CharField(blank=True, default='', max_length=11)),
                ('firmware_version', models.CharField(blank=True, default='', max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceVersion',
            fields=[
                ('name', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('capacity', models.PositiveSmallIntegerField()),
                ('latest_firmware_version', models.CharField(max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('producer', models.CharField(blank=True, default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PairingInfo',
            fields=[
                ('pairing_code', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('serial_number', models.UUIDField()),
                ('hardware_version', models.CharField(max_length=11)),
                ('firmware_version', models.CharField(max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('beneficiary', models.CharField(max_length=100)),
                ('associated_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TelemetryLog',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.PositiveIntegerField()),
                ('signal_strength', models.PositiveSmallIntegerField()),
                ('battery_status', models.PositiveSmallIntegerField()),
                ('battery_voltage', models.PositiveSmallIntegerField()),
                ('device_status', models.PositiveSmallIntegerField(choices=[(0, 'Ok'), (1, 'Unexpected Error'), (2, 'Battery Low')])),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_logs', to='API.Device')),
            ],
        ),
        migrations.CreateModel(
            name='PredefinedTime',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('time', models.TimeField()),
                ('name', models.CharField(max_length=100)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predefinedTimes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dose',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('planned_administration_time', models.DateTimeField(blank=True, null=True, validators=[API.models.dose.planned_administration_time_validator])),
                ('number_of_pills', models.FloatField(validators=[API.models.dose.number_of_pills_validator])),
                ('on_demand', models.BooleanField(default=False)),
                ('chamber', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='doses', to='API.Chamber')),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='doses', to='API.Medicine')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doses', to='API.Treatment')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='api_token', to='API.Device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'DeviceToken',
                'verbose_name_plural': 'DeviceTokens',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='device',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='supervisors',
            field=models.ManyToManyField(blank=True, related_name='supervised_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='existing_devices', to='API.DeviceVersion'),
        ),
        migrations.CreateModel(
            name='DebugLog',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('severity', models.PositiveSmallIntegerField(choices=[(0, 'Info'), (1, 'Warning'), (2, 'Critical')])),
                ('timestamp', models.PositiveIntegerField()),
                ('message_code', models.PositiveSmallIntegerField(choices=[(0, 'Device On'), (1, 'Container In'), (2, 'Container Out'), (3, 'Button Pressed')])),
                ('details', models.CharField(blank=True, default='', max_length=256)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debug_logs', to='API.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('position', models.PositiveSmallIntegerField()),
                ('last_refill', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='API.Device')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='existing_containers', to='API.ContainerVersion')),
            ],
        ),
        migrations.AddField(
            model_name='chamber',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chambers', to='API.Container'),
        ),
    ]
