# Generated by Django 3.0 on 2021-06-06 12:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContainerVersion',
            fields=[
                ('name', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('capacity', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this device should be treated as active. Unselect this instead of deleting device object.', verbose_name='active')),
                ('name', models.CharField(max_length=100)),
                ('serial_number', models.UUIDField(blank=True, null=True)),
                ('hardware_version', models.CharField(blank=True, default='', max_length=11)),
                ('firmware_version', models.CharField(blank=True, default='', max_length=11)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_devices', to=settings.AUTH_USER_MODEL)),
                ('supervisors', models.ManyToManyField(blank=True, related_name='supervised_devices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceVersion',
            fields=[
                ('name', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('capacity', models.PositiveSmallIntegerField()),
                ('latest_firmware_version', models.CharField(max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='PairingInfo',
            fields=[
                ('pairing_code', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('serial_number', models.UUIDField()),
                ('hardware_version', models.CharField(max_length=11)),
                ('firmware_version', models.CharField(max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='TelemetryLog',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.PositiveIntegerField()),
                ('signal_strength', models.PositiveSmallIntegerField()),
                ('battery_status', models.PositiveSmallIntegerField()),
                ('battery_voltage', models.PositiveSmallIntegerField()),
                ('device_status', models.PositiveSmallIntegerField(choices=[(0, 'Ok'), (1, 'Unexpected Error'), (2, 'Battery Low')])),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_logs', to='DeviceAPI.Device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='api_token', to='DeviceAPI.Device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'DeviceToken',
                'verbose_name_plural': 'DeviceTokens',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='device',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='existing_devices', to='DeviceAPI.DeviceVersion'),
        ),
        migrations.CreateModel(
            name='DebugLog',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('severity', models.PositiveSmallIntegerField(choices=[(0, 'Info'), (1, 'Warning'), (2, 'Critical')])),
                ('timestamp', models.PositiveIntegerField()),
                ('message_code', models.PositiveSmallIntegerField(choices=[(0, 'Device On'), (1, 'Container In'), (2, 'Container Out'), (3, 'Button Pressed')])),
                ('details', models.CharField(blank=True, default='', max_length=256)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debug_logs', to='DeviceAPI.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('position', models.PositiveSmallIntegerField()),
                ('last_refill', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='DeviceAPI.Device')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='existing_containers', to='DeviceAPI.ContainerVersion')),
            ],
        ),
        migrations.CreateModel(
            name='Chamber',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('position', models.PositiveSmallIntegerField()),
                ('is_full', models.BooleanField(default=False)),
                ('real_administration_time', models.DateTimeField(blank=True, null=True)),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chambers', to='DeviceAPI.Container')),
            ],
        ),
    ]
